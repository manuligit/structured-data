;; Anything you type in here will be executed
;; immediately with the results shown on the
;; right.
(def china {:name "China MiÃ©ville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})

(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})

(def books [cities, wild-seed, embassytown, little-schemer])

(defn element-lengths [collection]
  (map count collection))

(element-lengths ["foo" "bar" "" "quux"])


(defn second-elements [collection]
  (let [second (fn [x] (get x 1))]
    (map second collection)))

(second-elements [[1 2 3 4] [1] ["a" "s" "d" "f"]])

(defn titles [books]
  (let [books (fn [x] (:title x))])
  (map :title books))

(titles [cities]) ;=> ("The City and the City" )
(titles books)